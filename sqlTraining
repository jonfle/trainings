Completing training: SQL Server 2012 Querying (70-461) Part 1 by Christopher Harrison, available on [Pluralsight](https://app.pluralsight.com/library/courses/sql-server-2012-querying-pt1/description)

#Introduction to relational databases

##Database concepts
- **Stored procedures** are commands that can be executed to make changes or return data
- **Functions** are commapnds that can be executed to return data
- **Constraints** ensure valid values, like allowing only dates *before today* in a column
- **Primary Keys** are like SSNs. Uniquely identify a record
- **Foreign Keys** are used to create relationships between tables; refers to the column pointing to the primary key column in the other table

##Relationships
- One-to-One --> one row in table A refers to one row in table B. Not very common.
- One-to-Many --> one row in table A refers to many rows in table B. The most common.
- Many-to-Many --> many rows in table A refers to many rows in table B. Usually needs a middle table, called a "join table"

##DB Design
- Changing DB design causes headaches. Proper planning is essential, and experience is the best teacher. DBA usually does the design. 
- Normalization is a good guide for designing tables. It's a guide, not a set of rules.
    - 1st form: table has no repeating groups
    - 2nd form: if a column could uniquely identify an item, don't duplicate it
    - 3rd form: every value must only depend on the key; no calculated values
    
##Manipulating Data
1. Retrieve using *SELECT*
2. Create using *INSERT*
3. Modify using *UPDATE*
4. Delete using *DELETE*

##Result Sets vs. Row Based
- Don't use row based logic! 

##Variables
- Variable names must start with @
- Variable type establishes the data type
- Also has the value, which is the stored information. Can be NULL. 

DECLARE @<NAME> <DATATYPE>;
SET @<NAME> = <VALUE>;

#Intro to SELECT Statements
- Schemas are just like folders
- Best practice is to always specify the schema
- Treat everything as case-sensitive

- SELECT <columns> --> define what columns you want
- FROM <tables>
- WHERE <conditions>
- GROUP BY <columns> --> aggregates
- HAVING <conditions> --> allows you to eliminate groups
- ORDER BY <columns>

##Column Aliases
- <column> as <alias>
- Can use math operators in the SELECT statement and then an alias to create the column name
- Can't use column aliases in the WHERE line because it operates before the SELECT line

##Predicates
- BETWEEN: inclusive range; e.g. BETWEEN 100 AND 200
- [NOT] IN: in a list of values
- LIKE: used to query strings using wild cards. 
    - % zero or more characters
    - _ one character
    - [] used for a range
    - [^] any character except what is in the range
e.g. WHERE email LIKE 'Jonathan.F%' --> will find every records with email starting with Jonathan.F; anything can come after 'F'
- IS and IS NOT are used to handle NULLs

#Utilizing Joins
- One column from each table will be the "seam"
- Seam is used to match data from one table to the other - you can actually join two or more tables

##Join Syntax

SELECT <COLUMNS> 
FROM schema.table1 AS t1
    JOIN schema.table2 AS t2 ON t1.Column = t2.Column; (the last part is the "seam")
    
##Inner Joins
- Most common type of join
- Joins 2 tables together
- Returns rows from both sides where both sides match on the seam

##Outer Joins
- Returns rows from tables even if they don't match the seam
###FULL
    - Returns rows from both tables even if they don't match the join statement
    - e.g. Find customers without orders and orphaned orders
###LEFT or RIGHT
    - No difference except in order of tables in FROM clause
    - Direction points at table to retrieve non-matching rows from
    - e.g. Find customers who haven't placed orders

#Subqueries
Subqueries are queries within queries
- Breakdown complex logic
- Simplify reading
- "Sneak in" operations that otherwise wouldn't be allowed
- Focus on good, readable code first. Then SQL can re-write in the fastest way

##SELECT Line
- Must return a single (scalar) value

e.g.
--Show difference between product price and average product price
Select Name
, List Price - (select avg(ListPrice) from Production.Product) differenceFromAverage
From Production.Product;

##FROM Line
- Must alias the result

e.g.
--Show list price compared to the average for that subcategory
Select p.name
, p.ListPrice - ap.averagelistprice as differencefromsubcategoryaverage
FROM production.product p
    inner join (select productsubcategoryID
    , avg(listPrice) as AverageListPrice
    FROM Production.product
    group by productsubcategoryID) as ap
on p.productsubcategoryid = ap.productsubcategoryid;

##WHERE Line
- using predicates:
    - IN: confirms column value exists in subquery; similar to inner join
    - EXISTS: returns true if subquery returns values
    - ALL: compares column value to all items returned by subquery
    - ANY or SOME: identical; compares column value to any of the subquery 
    
#UNION Statements
- Each query must contain same number of columns
- Data types must be compatible
- First query sets column names of result set
- By default, UNION queries are DISTINCT; use UNION ALL to include duplicates

#Aggregating data
- NULL values are ignored
- if you hear people say "by", it's a good clue to use GROUP BY e.g. "sales by region"
- HAVING filters groups - so we can make sure entire groups meet particular criteria e.g. "customer zip codes that have spent $10k"
- HAVING filters groups while WHERE filters rows

##ROLLUP
- ROLLUP provides totals using orders of GROUP BY
- CUBE does the same but for even more groupings - probably not useful because you lose control, but it does a lot of work for you

##Common Table Expressions (CTE)
###SYNTAX

WITH <name> [columns]
AS (select....)
---then use that as a normal table

- PIVOT statements can turn rows into columns, like a pivot table

#Functions
- Avoid passing columns into functions in SELECT statements, especially in the WHERE line

#Optimizations
- Indexes: think of them like how phonebooks sort data by last name
    - Generally lead to faster queries
    - Indexes need to be kept up to date
        When data is deleted, the indexes aren't repaired
- Clustered index is the order which the data in the table is stored; like a page number in a book
- Non clustered index is a copy of the data sorted for queries; like the keywords in the 'index' portion of a text book, which lead you to the original content(s)

